# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License

# This file is automatically generated by CrossSync. Do not edit manually.

from __future__ import annotations
from typing import Sequence
import time
from functools import wraps
from google.cloud.bigtable.data._metrics.data_model import ActiveOperationMetric
from google.cloud.bigtable.data._metrics.data_model import OperationState
from google.cloud.bigtable.data._metrics.data_model import OperationType
from google.cloud.bigtable.data._metrics.handlers._base import MetricsHandler
from grpc import UnaryUnaryClientInterceptor
from grpc import UnaryStreamClientInterceptor


def _with_operation_from_metadata(func):
    """Decorator for interceptor methods to extract the active operation
    from metadata and pass it to the decorated function."""

    @wraps(func)
    def wrapper(self, continuation, client_call_details, request):
        operation: "ActiveOperationMetric" | None = ActiveOperationMetric.get_active()
        if operation:
            if (
                operation.state == OperationState.CREATED
                or operation.state == OperationState.BETWEEN_ATTEMPTS
            ):
                operation.start_attempt()
            return func(self, operation, continuation, client_call_details, request)
        else:
            return continuation(client_call_details, request)

    return wrapper


def _get_metadata(source) -> dict[str, str | bytes] | None:
    """Helper to extract metadata from a call or RpcError"""
    try:
        metadata: Sequence[tuple[str.str | bytes]] = (
            source.trailing_metadata() + source.initial_metadata()
        )
        return {k: v for (k, v) in metadata}
    except Exception:
        return None


class BigtableMetricsInterceptor(
    UnaryUnaryClientInterceptor, UnaryStreamClientInterceptor, MetricsHandler
):
    """
    An async gRPC interceptor to add client metadata and print server metadata.
    """

    @_with_operation_from_metadata
    def intercept_unary_unary(
        self, operation, continuation, client_call_details, request
    ):
        metadata = None
        try:
            call = continuation(client_call_details, request)
            metadata = _get_metadata(call)
            return call
        except Exception as rpc_error:
            metadata = _get_metadata(rpc_error)
            raise rpc_error
        finally:
            if metadata is not None:
                operation.add_response_metadata(metadata)

    @_with_operation_from_metadata
    def intercept_unary_stream(
        self, operation, continuation, client_call_details, request
    ):
        def response_wrapper(call):
            has_first_response = (
                operation.first_response_latency_ns is not None
                or operation.op_type != OperationType.READ_ROWS
            )
            encountered_exc = None
            try:
                for response in call:
                    if not has_first_response:
                        operation.first_response_latency_ns = (
                            time.monotonic_ns() - operation.start_time_ns
                        )
                        has_first_response = True
                    yield response
            except Exception as e:
                encountered_exc = e
                raise
            finally:
                if call is not None:
                    metadata = _get_metadata(encountered_exc or call)
                    if metadata is not None:
                        operation.add_response_metadata(metadata)

        try:
            return response_wrapper(continuation(client_call_details, request))
        except Exception as rpc_error:
            metadata = _get_metadata(rpc_error)
            if metadata is not None:
                operation.add_response_metadata(metadata)
            raise rpc_error
