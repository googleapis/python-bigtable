# Copyright 2025 Google LLC.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import importlib

import pytest

@pytest.mark.parametrize(
    "module", [
        # Previous locations of admin API
        "google.cloud.bigtable_admin",
        "google.cloud.bigtable_admin_v2",

        # New locations of admin API
        "google.cloud.bigtable.admin",
        "google.cloud.bigtable.admin_v2",
    ]
)
def test_admin_overlay_object_imports(module):
    # Simulate from <module> import <class> dynamically using importlib
    mod = importlib.import_module(module)

    # Check that the import aliasing works as expected for overlay/autogenerated clients/types.
    classes_to_modules = {
        "BigtableTableAdminClient": "google.cloud.bigtable.admin_v2.overlay.services.bigtable_table_admin.client",
        "RestoreTableOperation": "google.cloud.bigtable.admin_v2.overlay.types.restore_table",
        "BigtableInstanceAdminClient": "google.cloud.bigtable.admin_v2.services.bigtable_instance_admin.client",
        "RestoreTableRequest": "google.cloud.bigtable.admin_v2.types.bigtable_table_admin",
    }

    for cls_name, submodule_name in classes_to_modules.items():
        cls = getattr(mod, cls_name)
        submodule = importlib.import_module(submodule_name)
        assert cls == getattr(submodule, cls_name)

        # Check that from <module> import * has the class inside.
        assert cls_name in mod.__all__


@pytest.mark.parametrize(
    "alias,actual",
    [
        (
            "google.cloud.bigtable_admin_v2.services.bigtable_instance_admin.pagers",
            "google.cloud.bigtable.admin_v2.services.bigtable_instance_admin.pagers",
        ),
        (
            "google.cloud.bigtable_admin_v2.services.bigtable_table_admin.transports",
            "google.cloud.bigtable.admin_v2.services.bigtable_table_admin.transports",
        ),
        (
            "google.cloud.bigtable_admin_v2.overlay.services.bigtable_table_admin.client",
            "google.cloud.bigtable.admin_v2.overlay.services.bigtable_table_admin.client",
        ),
        (
            "google.cloud.bigtable_admin_v2.overlay.types.async_consistency",
            "google.cloud.bigtable.admin_v2.overlay.types.async_consistency",
        ),
    ]
)
def test_admin_shim_import_aliasing(alias, actual):
    assert importlib.import_module(alias) == importlib.import_module(actual)


@pytest.mark.parametrize(
    "alias,cls_name,subpackage_location",
    [
        (
            "google.cloud.bigtable_admin_v2.types",
            "GcRule",
            "google.cloud.bigtable.admin_v2.types.table",
        ),
        (
            "google.cloud.bigtable_admin_v2.services.bigtable_instance_admin",
            "BigtableInstanceAdminAsyncClient",
            "google.cloud.bigtable.admin_v2.services.bigtable_instance_admin.async_client",
        ),
        (
            "google.cloud.bigtable_admin_v2.overlay.services.bigtable_table_admin",
            "BigtableTableAdminClient",
            "google.cloud.bigtable.admin_v2.overlay.services.bigtable_table_admin.client",
        ),
        (
            "google.cloud.bigtable_admin_v2.overlay.types",
            "RestoreTableOperation",
            "google.cloud.bigtable.admin_v2.overlay.types.restore_table",
        ),
    ]
)
def test_admin_shim_services_types_subpackage_aliasing(alias, cls_name, subpackage_location):
    # Because of existing aliasing on the types/service subpackages in google.cloud.bigtable.admin_v2,
    # we need to see if this works with google.cloud.bigtable_admin_v2.

    # Simulate from <module> import <class> dynamically using importlib
    alias_mod = importlib.import_module(alias)
    cls = getattr(alias_mod, cls_name)
    subpackage = importlib.import_module(subpackage_location)
    assert cls == getattr(subpackage, cls_name)
    assert cls_name in alias_mod.__all__
