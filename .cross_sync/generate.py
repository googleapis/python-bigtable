# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
from __future__ import annotations
from typing import Sequence
import ast
"""
Entrypoint for initiating an async -> sync conversion using CrossSync

Finds all python files rooted in a given directory, and uses
transformers.CrossSyncFileHandler to handle any files marked with
__CROSS_SYNC_OUTPUT__
"""


class CrossSyncOutputFile:

    def __init__(self, file_path: str, ast_tree):
        self.file_path = file_path
        self.tree = ast_tree

    def render(self, with_black=True, save_to_disk: bool = False) -> str:
        """
        Render the file to a string, and optionally save to disk

        Args:
            with_black: whether to run the output through black before returning
            save_to_disk: whether to write the output to the file path
        """
        header = (
            "# Copyright 2024 Google LLC\n"
            "#\n"
            '# Licensed under the Apache License, Version 2.0 (the "License");\n'
            "# you may not use this file except in compliance with the License.\n"
            "# You may obtain a copy of the License at\n"
            "#\n"
            "#     http://www.apache.org/licenses/LICENSE-2.0\n"
            "#\n"
            "# Unless required by applicable law or agreed to in writing, software\n"
            '# distributed under the License is distributed on an "AS IS" BASIS,\n'
            "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"
            "# See the License for the specific language governing permissions and\n"
            "# limitations under the License.\n"
            "#\n"
            "# This file is automatically generated by CrossSync. Do not edit manually.\n"
        )
        full_str = header + ast.unparse(self.converted)
        if with_black:
            import black  # type: ignore
            import autoflake  # type: ignore

            full_str = black.format_str(
                autoflake.fix_code(full_str, remove_all_unused_imports=True),
                mode=black.FileMode(),
            )
        if save_to_disk:
            import os
            os.makedirs(os.path.dirname(self.output_path), exist_ok=True)
            with open(self.output_path, "w") as f:
                f.write(full_str)
        return full_str


def convert_files_in_dir(directory: str) -> set[CrossSyncOutputFile]:
    import glob
    from transformers import CrossSyncFileHandler

    # find all python files in the directory
    files = glob.glob(directory + "/**/*.py", recursive=True)
    # keep track of the output files pointed to by the annotated classes
    artifacts: set[CrossSyncOutputFile] = set()
    file_transformer = CrossSyncFileHandler()
    # run each file through ast transformation to find all annotated classes
    for file_path in files:
        file = open(file_path).read()
        converted_tree = file_transformer.visit(ast.parse(file))
        if converted_tree is not None:
            # contains __CROSS_SYNC_OUTPUT__ annotation
            artifacts.add(CrossSyncOutputFile(file_path, converted_tree))
    # return set of output artifacts
    return artifacts


def save_artifacts(artifacts: Sequence[CrossSyncOutputFile]):
    for a in artifacts:
        a.render(save_to_disk=True)


if __name__ == "__main__":
    import sys

    search_root = sys.argv[1]
    outputs = convert_files_in_dir(search_root)
    print(f"Generated {len(outputs)} artifacts: {[a.file_name for a in outputs]}")
    save_artifacts(outputs)
